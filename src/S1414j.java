/* Generated By:JavaCC: Do not edit this line. S1414j.java */
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
class S1414j implements S1414jConstants {
  private PrintWriter outFile;
  private S1414jSymTab st;
  private S1414jCodeGen cg;
  //-----------------------------------------
  public static void main(String[] args) throws
                                             IOException
  {
    System.out.println("S1414j compiler written by Hung PHAN, Shir Lie Ooi, Sen Shen");

    if (args.length != 1)
    {
      System.err.println("Wrong number cmd line args");
      System.exit(1);
    }

    // build input and output file names
    String inFileName = args[0] + ".s";
    String outFileName = args[0] + ".a";

    // construct file objects
    FileInputStream inFile =
                       new FileInputStream(inFileName);
    PrintWriter outFile = new PrintWriter(outFileName);

    // identify compiler/author in output file
    outFile.println("; from S1414j compiler written by Hung PHAN, Shir Lie Ooi, Sen Shen");

    // construct objects that make up compiler
    S1414jSymTab st = new S1414jSymTab();
    S1414jCodeGen cg = new S1414jCodeGen(outFile, st);
    S1414j parser = new S1414j(inFile);

    // initialize parser's instance variables
    parser.outFile = outFile;
    parser.st = st;
    parser.cg = cg;

    try
    {
      parser.program();
    }
    catch(ParseException e)
    {
      System.err.println(e.getMessage());
      outFile.println(e.getMessage());
      outFile.close();
      System.exit(1);
    }

    outFile.close();
  }
  //-----------------------------------------
  // If COMMON_TOKEN_ACTION is true, the token manager 
  // calls makeComment for each token to create the
  // token trace.
  //
  public void makeComment(Token t)
  {
    outFile.printf(
      "; kd=%3d bL=%3d bC=%3d eL=%3d eC=%3d im= %s%n",
       t.kind, t.beginLine, t.beginColumn, t.endLine,
       t.endColumn, t.image);
  }

  // second makeComment method
  public void makeComment(Token t1, Token t2)
  {
        outFile.print("; "); // start comment
        while (t1 != t2)
        {
                outFile.print(t1.image + " ");
                t1 = t1.next;
        }
        outFile.println(); // terminate comment
  }

  //third makeComment method
  public void makeComment(String s)
  {
        outFile.println("; " + s);
  }

// Translation grammar for S1414j and S1 ==================
  final public void program() throws ParseException {
    statementList();
    cg.endCode();
    jj_consume_token(0);
  }

//------------------------------
  final public void statementList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINTLN:
    case PRINT:
    case READINT:
    case VAR_INCREMENT:
    case VAR_DECREMENT:
    case INCREMENT_VAR:
    case DECREMENT_VAR:
    case ID:
    case SEMICOLON:
    case LEFTBRACE:
      statement();
      statementList();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

//------------------------------
  final public void statement() throws ParseException {
                   Token t; boolean outComment;
         t = getToken(1);
         outComment = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_INCREMENT:
      incrementFirstStatement();
      break;
    case INCREMENT_VAR:
      incrementThenStatement();
      break;
    case DECREMENT_VAR:
      decrementFirstStatement();
      break;
    case VAR_DECREMENT:
      decrementThenStatement();
      break;
    case ID:
      assignmentStatement();
      break;
    case PRINTLN:
      printlnStatement();
      break;
    case PRINT:
      printStatement();
      break;
    case SEMICOLON:
      nullStatement();
      break;
    case LEFTBRACE:
      compoundStatement();
            outComment = false;
      break;
    case READINT:
      readintStatement();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         if (outComment) makeComment(t, getToken(1));
  }

//------------------------------
  final public void incrementFirstStatement() throws ParseException {
                                 Token t;
    t = jj_consume_token(VAR_INCREMENT);
    st.enter(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("pc", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("pwc", "1");
    cg.emitInstruction("add");
    cg.emitInstruction("stav");
  }

//------------------------------
  final public void incrementThenStatement() throws ParseException {
                                Token t;
    t = jj_consume_token(INCREMENT_VAR);
     cg.emitInstruction("pc", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("pwc", "1");
    cg.emitInstruction("add");
    cg.emitInstruction("stav");
  }

//------------------------------
  final public void decrementFirstStatement() throws ParseException {
                                 Token t;
    t = jj_consume_token(DECREMENT_VAR);
    st.enter(t.image.replaceAll("--", ""));
    cg.emitInstruction("pc", t.image.replaceAll("--", ""));
    cg.emitInstruction("p", t.image.replaceAll("--", ""));
    cg.emitInstruction("pwc", "-1");
    cg.emitInstruction("add");
    cg.emitInstruction("stav");
  }

//------------------------------
  final public void decrementThenStatement() throws ParseException {
                                Token t;
    t = jj_consume_token(VAR_DECREMENT);
    st.enter(t.image.replaceAll("--", ""));
    cg.emitInstruction("pc", t.image.replaceAll("--", ""));
         cg.emitInstruction("p", t.image.replaceAll("--", ""));
    cg.emitInstruction("pwc", "-1");
    cg.emitInstruction("add");
    cg.emitInstruction("stav");
  }

//------------------------------
  final public void assignmentStatement() throws ParseException {
                             Token t;
    t = jj_consume_token(ID);
    st.enter(t.image);
    cg.emitInstruction("pc", t.image);;
    jj_consume_token(ASSIGN);
    assignmentTail();
    cg.emitInstruction("stav");
     cg.doIncrementAndDecrement();
  }

//------------------------------
  final public void assignmentTail() throws ParseException {
                        Token t;
    if (jj_2_1(2)) {
      t = jj_consume_token(ID);
    st.enter(t.image);
    cg.emitInstruction("pc", t.image);
      jj_consume_token(ASSIGN);
      assignmentTail();
    cg.emitInstruction("dupe");
    cg.emitInstruction("rot");
    cg.emitInstruction("stav");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case VAR_INCREMENT:
      case VAR_DECREMENT:
      case INCREMENT_VAR:
      case DECREMENT_VAR:
      case ID:
      case LEFTPAREN:
      case PLUS:
      case MINUS:
        expr();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//------------------------------
  final public void printlnStatement() throws ParseException {
    jj_consume_token(PRINTLN);
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
    case STRING:
    case VAR_INCREMENT:
    case VAR_DECREMENT:
    case INCREMENT_VAR:
    case DECREMENT_VAR:
    case ID:
    case LEFTPAREN:
    case PLUS:
    case MINUS:
      printArg();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
    cg.emitInstruction("pc", "'\u005c\u005cn'");
    cg.emitInstruction("aout");
     cg.doIncrementAndDecrement();
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void printArg() throws ParseException {
                  Token t; String label;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
         label=cg.getLabel();
         cg.emitInstruction("pc", label);
         cg.emitInstruction("sout");
         cg.emitdw("^"+label, t.image);
      break;
    case UNSIGNED:
    case VAR_INCREMENT:
    case VAR_DECREMENT:
    case INCREMENT_VAR:
    case DECREMENT_VAR:
    case ID:
    case LEFTPAREN:
    case PLUS:
    case MINUS:
      expr();
         cg.emitInstruction("dout");
          cg.doIncrementAndDecrement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//------------------------------
  final public void printStatement() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LEFTPAREN);
    printArg();
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(SEMICOLON);
  }

//------------------------------
  final public void nullStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

//------------------------------
  final public void compoundStatement() throws ParseException {
    jj_consume_token(LEFTBRACE);
    makeComment("{");
    statementList();
    jj_consume_token(RIGHTBRACE);
    makeComment("}");
  }

  final public void readintStatement() throws ParseException {
                          Token t;
    jj_consume_token(READINT);
    jj_consume_token(LEFTPAREN);
    t = jj_consume_token(ID);
    st.enter(t.image);
    cg.emitInstruction("pc", t.image);
    cg.emitInstruction("din");
    cg.emitInstruction("stav");
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(SEMICOLON);
  }

//------------------------------
  final public void expr() throws ParseException {
    term();
    termList();
  }

//------------------------------
  final public void termList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      term();
    cg.emitInstruction("add");
      termList();
      break;
    case MINUS:
      jj_consume_token(MINUS);
      term();
    cg.emitInstruction("sub");
      termList();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

//------------------------------
  final public void term() throws ParseException {
    factor();
    factorList();
  }

//------------------------------
  final public void factorList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
      factor();
    cg.emitInstruction("mult");
      factorList();
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      factor();
    cg.emitInstruction("div");
      factorList();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

//------------------------------
  final public void factor() throws ParseException {
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
      t = jj_consume_token(UNSIGNED);
    cg.emitInstruction("pwc", t.image);
      break;
    case INCREMENT_VAR:
      t = jj_consume_token(INCREMENT_VAR);
    cg.emitInstruction("pc", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
         cg.emitInstruction("pwc", "1");
         cg.emitInstruction("add");
         cg.emitInstruction("stav");
         st.enter(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
      break;
    case DECREMENT_VAR:
      t = jj_consume_token(DECREMENT_VAR);
    cg.emitInstruction("pc", t.image.replaceAll("--", ""));
    cg.emitInstruction("p", t.image.replaceAll("--", ""));
         cg.emitInstruction("pwc", "-1");
         cg.emitInstruction("add");
         cg.emitInstruction("stav");
         st.enter(t.image.replaceAll("--", ""));
    cg.emitInstruction("p", t.image.replaceAll("--", ""));
      break;
    case ID:
      t = jj_consume_token(ID);
    st.enter(t.image);
    cg.emitInstruction("p", t.image);
      break;
    case VAR_INCREMENT:
      t = jj_consume_token(VAR_INCREMENT);
  cg.addIncrementOrDecrement(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""),"++");
    st.enter(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
      break;
    case VAR_DECREMENT:
      t = jj_consume_token(VAR_DECREMENT);
     cg.addIncrementOrDecrement(t.image.replaceAll("--", ""),"--");
    st.enter(t.image.replaceAll("--", ""));
    cg.emitInstruction("p", t.image.replaceAll("--", ""));
      break;
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      expr();
      jj_consume_token(RIGHTPAREN);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      factor();
      break;
    case MINUS:
      jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
        t = jj_consume_token(UNSIGNED);
       cg.emitInstruction("pwc", "-" + t.image);
        break;
      case ID:
        t = jj_consume_token(ID);
       st.enter(t.image);
           cg.emitInstruction("p", t.image);
       cg.emitInstruction("neg");
        break;
      case VAR_INCREMENT:
        t = jj_consume_token(VAR_INCREMENT);
        cg.addIncrementOrDecrement(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""),"++");
       st.enter(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
           cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
       cg.emitInstruction("neg");
        break;
      case VAR_DECREMENT:
        t = jj_consume_token(VAR_DECREMENT);
        cg.addIncrementOrDecrement(t.image.replaceAll("--", ""),"--");
       st.enter(t.image.replaceAll("-", ""));
           cg.emitInstruction("p", t.image.replaceAll("--", ""));
       cg.emitInstruction("neg");
        break;
      case INCREMENT_VAR:
        t = jj_consume_token(INCREMENT_VAR);
    cg.emitInstruction("pc", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
    cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
         cg.emitInstruction("pwc", "1");
         cg.emitInstruction("add");
         cg.emitInstruction("stav");
           st.enter(t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
           cg.emitInstruction("p", t.image.replaceAll("\u005c\u005c+\u005c\u005c+", ""));
       cg.emitInstruction("neg");
        break;
      case DECREMENT_VAR:
        t = jj_consume_token(DECREMENT_VAR);
    cg.emitInstruction("pc", t.image.replaceAll("--", ""));
    cg.emitInstruction("p", t.image.replaceAll("--", ""));
         cg.emitInstruction("pwc", "-1");
         cg.emitInstruction("add");
         cg.emitInstruction("stav");
    st.enter(t.image.replaceAll("--", ""));
    cg.emitInstruction("p", t.image.replaceAll("--", ""));
    cg.emitInstruction("neg");
        break;
      case LEFTPAREN:
        jj_consume_token(LEFTPAREN);
        expr();
        jj_consume_token(RIGHTPAREN);
       cg.emitInstruction("neg");
        break;
      case PLUS:
        label_1:
        while (true) {
          jj_consume_token(PLUS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_1;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          jj_consume_token(MINUS);
          factor();
          break;
        case UNSIGNED:
        case VAR_INCREMENT:
        case VAR_DECREMENT:
        case INCREMENT_VAR:
        case DECREMENT_VAR:
        case ID:
        case LEFTPAREN:
        case PLUS:
          factor();
          cg.emitInstruction("neg");
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
        factor();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public S1414jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x102f9c0,0x102f9c0,0x34fa00,0x34fe00,0x34fe00,0x300000,0xc00000,0x100000,0x34fa00,0x34fa00,0x34fa00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public S1414j(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public S1414j(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new S1414jTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public S1414j(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new S1414jTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public S1414j(S1414jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(S1414jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}                                          // end of S1414j
//======================================================
class S1414jSymTab
{
  private ArrayList<String> symbol;
  //-----------------------------------------
  public S1414jSymTab()
  {
    symbol = new ArrayList<String>();
  }
  //-----------------------------------------
  public void enter(String s)
  {
    int index = symbol.indexOf(s);

    // if s is not in symbol, then add it
    if (index < 0)
      symbol.add(s);
  }
  //-----------------------------------------
  public String getSymbol(int i)
  {
    return symbol.get(i);
  }
  //-----------------------------------------
  public int getSize()
  {
    return symbol.size();
  }
}                                    // end of S1414jSymTab
//======================================================
class S1414jCodeGen
{
  private PrintWriter outFile;
  private S1414jSymTab st;
  private int labelNumber;
  private HashMap<String,String> mapInDeVariable;

  //-----------------------------------------
  public S1414jCodeGen(PrintWriter outFile, S1414jSymTab st)
  {
    this.outFile = outFile;
    this.st = st;
    this.labelNumber = 0;
    mapInDeVariable=new HashMap<String, String>();
  }
  //-----------------------------------------
  public void emitInstruction(String op)
  {
    outFile.printf("          %-4s%n", op);
  }
  //-----------------------------------------
  public void emitInstruction(String op, String opnd)
  {
    outFile.printf(
                  "          %-4s      %s%n", op, opnd);
  }
  //-----------------------------------------
  public void emitdw(String label, String value)
  {
    outFile.printf(
             "%-9s dw        %s%n", label + ":", value);
  }
  //-----------------------------------------
  public String getLabel()
  {
          return "@L" + labelNumber++;
  }

  //-----------------------------------------
  public void addIncrementOrDecrement(String variable,String operator){
          mapInDeVariable.put(variable, operator);
  }

  //-----------------------------------------
  public void doIncrementAndDecrement()
  {

      for(String variable:mapInDeVariable.keySet()){
        emitInstruction("pc", variable);
        emitInstruction("p", variable);
          if(mapInDeVariable.get(variable).equals("++")){
            emitInstruction("pwc", "1");

              } else{
                emitInstruction("pwc", "-1");
              }
          emitInstruction("add");
        emitInstruction("stav");
        mapInDeVariable.remove(variable);
      }
  }

  public void endCode()
  {
    outFile.println();
    emitInstruction("halt");

    int size = st.getSize();
    // emit dw for each symbol in the symbol table
    for (int i=0; i < size; i++)
      emitdw(st.getSymbol(i), "0");
  }
}
