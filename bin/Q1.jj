options 
{
  STATIC = false;         // generate non-static methods

  // set to true to debug token manager
  COMMON_TOKEN_ACTION = false;   

  // pass parser reference to the token manager
  TOKEN_MANAGER_USES_PARSER = true; 
}      
PARSER_BEGIN(Q1)
import java.io.*;
import java.util.*;
public class Q1 {
  public static void main(String[] args) throws Exception {
	Q1 parser = new Q1(new FileInputStream(args[0]));
	try {parser.prog(); System.out.println("yes");}
		catch(Exception e) {
		e.printStackTrace();
		  System.out.println("no");}}
	}
//======================================================
class Q1SymTab
{
  private ArrayList<String> symbol;
  //-----------------------------------------
  public Q1SymTab()
  {
    symbol = new ArrayList<String>();
  }
  //-----------------------------------------
  public void enter(String s)
  {
    int index = symbol.indexOf(s);

    // if s is not in symbol, then add it
    if (index < 0)
      symbol.add(s);
  }
  //-----------------------------------------
  public String getSymbol(int i)
  {
    return symbol.get(i);
  }
  //-----------------------------------------
  public int getSize()
  {
    return symbol.size();
  }
}                                    // end of Q1SymTab
//======================================================
class Q1CodeGen
{
  private PrintWriter outFile;
  private Q1SymTab st;
  //-----------------------------------------
  public Q1CodeGen(PrintWriter outFile, Q1SymTab st)
  {
    this.outFile = outFile;
    this.st = st;
  }
  //-----------------------------------------
  public void emitInstruction(String op)
  {
    outFile.printf("          %-4s%n", op); 
  }
  //-----------------------------------------
  public void emitInstruction(String op, String opnd)
  {
    outFile.printf(
                  "          %-4s      %s%n", op, opnd); 
  }
  //-----------------------------------------
  public void emitdw(String label, String value)
  {
    outFile.printf(
             "%-9s dw        %s%n", label + ":", value);
  }
  //-----------------------------------------
  public void endCode()
  {
    outFile.println();
    emitInstruction("halt");

    int size = st.getSize();
    // emit dw for each symbol in the symbol table
    for (int i=0; i < size; i++) 
      emitdw(st.getSymbol(i), "0");
  }
}                             // end of Q1CodeGen class

PARSER_END(Q1)


// Specification of the Q1 token manager ==============

TOKEN_MGR_DECLS:
{
  // called for each token returned to parser
}
//------------------------------
SKIP:  // these tokens are not returned to parser
{
   " " 
 | 
   "\n" 
 | 
   "\r" 
 | 
   "\t"
 |
   <"//"(~["\n", "\r"])*>
}
//------------------------------
TOKEN:  // these tokens are returned to parser
{
     <THEN: "THEN">  // must precede <ID> 
 |
     <ELSE: "ELSE">  // must precede <ID> 
 |
     <FI: "FI">  // must precede <ID> 
 |
 <WHILE: "WHILE">  // must precede <ID> 
 |
    <DO: "DO">  // must precede <ID>
 |
    <OD: "OD">  // must precede <ID> 
 |
    <IF: "IF">  // must precede <ID>
 |
   <ASSIGN2: ":="> 
 |
   <PRINTLN: "println">  // must precede <ID> 
 |
   <PRINT: "print">
 |
   <UNSIGNED: (["0"-"9"])+> 
 |
   <ID: ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"])*>
 |
   <ASSIGN: "=">
 |
   <SEMICOLON: ";">
 |
   <LEFTPAREN: "(">
 |
   <RIGHTPAREN: ")">
 |
   <PLUS: "+">
 |
   <MINUS: "-">
 |
   <TIMES: "*">
 |
   <DIVIDE: "/">
 |
   <LEFTBRACE: "{">
 |
   <RIGHTBRACE: "}">
  
  |
   <ANDBIT: "&">
   
  |
   <COMMA: ",">
 |
   <ERROR: ~[]>  // matches any single character
}
/*S -> EXPR
EXPR -> EXPR "," EXPR
EXPR -> "IF" EXPR "THEN" EXPR "ELSE" EXPR "FI"
EXPR -> "WHILE" EXPR "DO" EXPR "OD"
EXPR -> ID ":=" UNSIGNED
EXPR -> ID "&"*/
// Translation grammar for S2j and S1 ==================
void prog():{}
{
  S()
   <EOF>
}
void S():{}
{
  EXPR()
}

void EXPR(): { Token t1;} {
  
	"WHILE"
	EXPR()
	"DO"
	EXPR()
	"OD"
(
	LOOKAHEAD(1)  
  ","
  
	EXPR()
)*
	
|
	"IF"
	EXPR()
	"THEN"
	EXPR()
	"ELSE"
	EXPR()
	"FI"
(
	LOOKAHEAD(1)  
  ","
	EXPR()
)*
	
|
(  
	t1=<ID>
	(
	  ":="
	  <UNSIGNED>
	|
	   "&"	)
(
	LOOKAHEAD(1)  
  ","

	EXPR()
)*
	
)

}

